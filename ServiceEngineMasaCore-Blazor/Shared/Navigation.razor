@inherits ProComponentBase
@inject NavHelper NavHelper
@inject GlobalConfig _GlobalConfig
@implements IDisposable

<MNavigationDrawer @bind-Value="Visible"
                   Style="overflow-y: auto;overflow-x: hidden;"
                   Class="@($"navigation {ComputedNavigationClass}")"
                   Width=300
                   MiniVariantWidth=80
                   Floating
                   ExpandOnHover="_GlobalConfig.ExpandOnHover"
                   MiniVariant="_GlobalConfig.ExpandOnHover"
                   App>

    <PrependContent>
        <div class="logo" @onclick="() => NavHelper.NavigateTo(GlobalVariables.DefaultRoute)">
            <img class="hover-pointer" height="49" src="/logo/logo5.png" />
        </div>
    </PrependContent>
    <ChildContent>
        <MList Nav Routable Dense Class="@($"pa-0 {(_GlobalConfig.ExpandOnHover ? "mini-navigation" : "")}")">

            @foreach (var nav in NavHelper.Navs)
            {
                if (nav.Children is null)
                {
                    <MBorder Value=false Offset Width=4 Class="rounded-r-1" Border="Borders.Right">
                        <MListItem Ripple=false Class="mb-4" ActiveClass="fill-lighten-1" Exact Link Href="@nav.Href">
                            <ItemContent>
                                <MListItemIcon>
                                    <MIcon Color="@(context.Active ? "primary" : "neutral-lighten-2")" Size=20>@nav.Icon</MIcon>
                                </MListItemIcon>
                                <MListItemContent>
                                    <div style="margin-left:6.5px;" class="text-truncate white-space:nowrap @(context.Active ? "text-subtitle" : "text-body neutral-lighten-2--text")">@T(nav.Title)</div>
                                </MListItemContent>
                            </ItemContent>
                        </MListItem>
                    </MBorder>
                }
                else
                {
                    @RenderNavigationBar(nav)
                }
            }
        </MList>
    </ChildContent>
</MNavigationDrawer>

@if (!(Masa.Breakpoint.Mobile && Visible is true))
{
    <MButton Small Fab Class="nav-toggle-btn" Color="primary" OnClick="Switch">
        <MIcon Class="white--text">
            @(Visible is false || _GlobalConfig.ExpandOnHover ? "mdi-chevron-right" : "mdi-chevron-left")
        </MIcon>
    </MButton>
}

@code{
    RenderFragment<NavModel> RenderNavigationBar => item =>
    @<MListGroup Class="mb-4" PrependIcon="@item.Icon" ActiveClass="primaryText" AppendIcon="M8.33398 10.3335L12.5007 14.5002L16.6673 10.3335H8.33398Z">
        <PrependIconContent>
            <MIcon>@item.Icon</MIcon>
        </PrependIconContent>
        <ActivatorContent>
            <MListItemTitle style="margin-left:6.5px;" class="text-truncate white-space:nowrap">@T(item.Title)</MListItemTitle>
        </ActivatorContent>
        <ChildContent>
            @foreach (var node in item.Children)
            {
                if (node.Children != null)
                 {
                    <MListGroup SubGroup NoAction>
                        <ActivatorContent>
                            <MListItemTitle>@T(node.Title)</MListItemTitle>
                        </ActivatorContent>
                        <ChildContent>
                            @foreach (var subNode in node.Children)
                            {
                                <MBorder Value=false Offset Width=4 Class="rounded-r-1" Border="Borders.Right">
                                        <MListItem Style="padding-left:1.5rem;" Ripple=false ActiveClass="fill-lighten-1" Link Exact Href="@subNode.Href">
                                        <MListItemIcon Class="mr-4">
                                            <MIcon>@subNode.Icon</MIcon>
                                        </MListItemIcon>
                                        <MListItemTitle>@T(subNode.Title)</MListItemTitle>
                                    </MListItem>
                                </MBorder>
                            }
                            </ChildContent>
                    </MListGroup>
                }
                else
                {
                    <MBorder Value=false Offset Width=4 Class="rounded-r-1" Border="Borders.Right">
                            <MListItem Style="padding-left:1.5rem;" Ripple=false ActiveClass="fill-lighten-1" Link Exact Href="@node.Href">
                            <MListItemIcon Class="mr-4">
                                <MIcon>@node.Icon</MIcon>
                            </MListItemIcon>
                            <MListItemTitle>@T(node.Title)</MListItemTitle>
                        </MListItem>
                    </MBorder>
                }
            }
        </ChildContent>
    </MListGroup>;

    RenderFragment<NavModel> RenderNavigationBar1 => item =>
    @<MListGroup Class="mb-4" PrependIcon="@item.Icon" SubGroup NoAction ActiveClass="primaryText" AppendIcon="M8.33398 10.3335L12.5007 14.5002L16.6673 10.3335H8.33398Z">
        <PrependIconContent>
            <MIcon>@item.Icon</MIcon>
        </PrependIconContent>
        <ActivatorContent>
            <MListItemContent>
                <div style="margin-left:6.5px;" class="text-truncate white-space:nowrap">@T(item.Title)</div>
            </MListItemContent>
        </ActivatorContent>
        <ChildContent>
            @foreach (var navChild in item.Children)
            {
                if (navChild.Children != null)
                {
                    <MListGroup @bind-Value="navChild.Active" PrependIcon="@navChild.Icon" SubGroup NoAction>
                        <ActivatorContent>
                            <MListItemTitle>@navChild.Title</MListItemTitle>
                        </ActivatorContent>
                        <ChildContent>
                            @foreach (var subNode in navChild.Children)
                            {
                                <MBorder Value=false Offset Width=7 Class="rounded-r-1" Border="Borders.Right">
                                    <MListItem Ripple=false ActiveClass="fill-lighten-1" Link Href="@subNode.Href">
                                        <ItemContent>
                                            <MListItemContent>
                                                <div class="text-truncate white-space:nowrap @(context.Active ? "text-subtitle2" : "text-btn neutral-lighten-2--text")">@T(subNode.Title)</div>
                                            </MListItemContent>
                                        </ItemContent>
                                    </MListItem>
                                </MBorder>
                            }
                        </ChildContent>
                    </MListGroup>
                }
                else
                {
                    <MBorder Value=false Offset Width=7 Class="rounded-r-1" Border="Borders.Right">
                            <MListItem Ripple=false ActiveClass="fill-lighten-1" Link Href="@navChild.Href">
                                <ItemContent>
                                    <MListItemContent>
                                        <div class="text-truncate white-space:nowrap @(navChild.Active ? "text-subtitle2" : "text-btn neutral-lighten-2--text")">@T(navChild.Title)</div>
                                    </MListItemContent>
                                </ItemContent>
                            </MListItem>
                    </MBorder>
                }
            }
        </ChildContent>
    </MListGroup>;
}